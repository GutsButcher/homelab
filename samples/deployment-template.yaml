apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-deployment
  namespace: default
  labels:
    app: myapp
    environment: production
  annotations:
    description: "Comprehensive deployment template"
spec:
  # Replicas
  replicas: 3

  # Deployment Strategy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1

  # Revision History Limit
  revisionHistoryLimit: 10

  # Progress Deadline
  progressDeadlineSeconds: 600

  # Selector (must match pod labels)
  selector:
    matchLabels:
      app: myapp

  # Pod Template
  template:
    metadata:
      labels:
        app: myapp
        environment: production
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"

    spec:
      # Service Account
      serviceAccountName: default

      # Security Context (pod-level)
      securityContext:
        runAsUser: 1000
        runAsGroup: 3000
        fsGroup: 2000
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault

      # Init Containers
      initContainers:
      - name: init-setup
        image: busybox:1.36
        command: ['sh', '-c', 'echo "Initializing..." && sleep 5']
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL

      # Main Containers
      containers:
      - name: app
        image: nginx:1.25-alpine
        imagePullPolicy: IfNotPresent

        # Ports
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP

        # Environment Variables
        env:
        - name: ENV_VAR_EXAMPLE
          value: "some-value"
        - name: SECRET_USERNAME
          valueFrom:
            secretKeyRef:
              name: my-secret
              key: username
        - name: CONFIG_VALUE
          valueFrom:
            configMapKeyRef:
              name: my-config
              key: config-key
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace

        # Resource Limits and Requests
        resources:
          requests:
            memory: "128Mi"
            cpu: "250m"
          limits:
            memory: "256Mi"
            cpu: "500m"

        # Liveness Probe
        livenessProbe:
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        # Readiness Probe
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3

        # Startup Probe
        startupProbe:
          httpGet:
            path: /startup
            port: http
          initialDelaySeconds: 0
          periodSeconds: 10
          failureThreshold: 30

        # Volume Mounts
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
          readOnly: true
        - name: secret-volume
          mountPath: /etc/secrets
          readOnly: true
        - name: data-volume
          mountPath: /data
        - name: cache-volume
          mountPath: /cache

        # Security Context (container-level)
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE

        # Lifecycle Hooks
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 15"]

      # Volumes
      volumes:
      - name: config-volume
        configMap:
          name: my-config
      - name: secret-volume
        secret:
          secretName: my-secret
      - name: data-volume
        persistentVolumeClaim:
          claimName: my-pvc
      - name: cache-volume
        emptyDir: {}

      # Restart Policy
      restartPolicy: Always

      # DNS Policy
      dnsPolicy: ClusterFirst

      # Node Selection
      nodeSelector:
        disktype: ssd

      # Affinity Rules
      affinity:
        # Pod Anti-Affinity (spread pods across nodes)
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - myapp
              topologyKey: kubernetes.io/hostname

      # Tolerations
      tolerations:
      - key: "node-role.kubernetes.io/control-plane"
        operator: "Exists"
        effect: "NoSchedule"

      # Termination Grace Period
      terminationGracePeriodSeconds: 30
